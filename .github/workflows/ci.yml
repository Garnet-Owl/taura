name: Taura CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff
    
    - name: Lint with Ruff
      run: ruff check . --exclude notebooks/
    
    - name: Check formatting with Ruff
      run: ruff format --check . --exclude notebooks/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint  # Run tests only after linting passes
    
    services:
      # For example:
      redis:
        image: redis
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true  # Enable Git LFS
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Install NLTK data
      run: |
        pip install nltk
        python -c "import nltk; nltk.download('stopwords', quiet=True)"
    
    - name: Download models (if needed)
      run: |
        mkdir -p models
        # Add any model download steps here if needed
        # For example: python src/data/download_models.py
    
    - name: Run tests
      run: pytest tests/

  build-notebook:
    name: Build and Check Jupyter Notebook
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nbconvert jupyter
    
    - name: Validate notebooks
      run: |
        # Check if notebooks are valid
        for nb in notebooks/*.ipynb; do
          if [ -f "$nb" ]; then
            echo "Validating $nb"
            jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=600 --stdout "$nb" > /dev/null
          fi
        done
